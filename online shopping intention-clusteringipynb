{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "1e82f8e7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Administrative</th>\n",
       "      <th>Administrative_Duration</th>\n",
       "      <th>Informational</th>\n",
       "      <th>Informational_Duration</th>\n",
       "      <th>ProductRelated</th>\n",
       "      <th>ProductRelated_Duration</th>\n",
       "      <th>BounceRates</th>\n",
       "      <th>ExitRates</th>\n",
       "      <th>PageValues</th>\n",
       "      <th>SpecialDay</th>\n",
       "      <th>Month</th>\n",
       "      <th>OperatingSystems</th>\n",
       "      <th>Browser</th>\n",
       "      <th>Region</th>\n",
       "      <th>TrafficType</th>\n",
       "      <th>VisitorType</th>\n",
       "      <th>Weekend</th>\n",
       "      <th>Revenue</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.20</td>\n",
       "      <td>0.20</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Feb</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Returning_Visitor</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2</td>\n",
       "      <td>64.000000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.10</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Feb</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>Returning_Visitor</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.20</td>\n",
       "      <td>0.20</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Feb</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>9</td>\n",
       "      <td>3</td>\n",
       "      <td>Returning_Visitor</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2</td>\n",
       "      <td>2.666667</td>\n",
       "      <td>0.05</td>\n",
       "      <td>0.14</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Feb</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>Returning_Visitor</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>10</td>\n",
       "      <td>627.500000</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.05</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Feb</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>Returning_Visitor</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Administrative  Administrative_Duration  Informational  \\\n",
       "0               0                      0.0              0   \n",
       "1               0                      0.0              0   \n",
       "2               0                      0.0              0   \n",
       "3               0                      0.0              0   \n",
       "4               0                      0.0              0   \n",
       "\n",
       "   Informational_Duration  ProductRelated  ProductRelated_Duration  \\\n",
       "0                     0.0               1                 0.000000   \n",
       "1                     0.0               2                64.000000   \n",
       "2                     0.0               1                 0.000000   \n",
       "3                     0.0               2                 2.666667   \n",
       "4                     0.0              10               627.500000   \n",
       "\n",
       "   BounceRates  ExitRates  PageValues  SpecialDay Month  OperatingSystems  \\\n",
       "0         0.20       0.20         0.0         0.0   Feb                 1   \n",
       "1         0.00       0.10         0.0         0.0   Feb                 2   \n",
       "2         0.20       0.20         0.0         0.0   Feb                 4   \n",
       "3         0.05       0.14         0.0         0.0   Feb                 3   \n",
       "4         0.02       0.05         0.0         0.0   Feb                 3   \n",
       "\n",
       "   Browser  Region  TrafficType        VisitorType  Weekend  Revenue  \n",
       "0        1       1            1  Returning_Visitor    False    False  \n",
       "1        2       1            2  Returning_Visitor    False    False  \n",
       "2        1       9            3  Returning_Visitor    False    False  \n",
       "3        2       2            4  Returning_Visitor    False    False  \n",
       "4        3       1            4  Returning_Visitor     True    False  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np \n",
    "import pandas as pd \n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import plotly as py\n",
    "import plotly.graph_objs as go\n",
    "# read the dataset\n",
    "data = pd.read_csv(r'F:\\DS\\online shopping\\archive (1)\\online_shoppers_intention.csv')\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "acc5a0d2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Administrative             0\n",
      "Administrative_Duration    0\n",
      "Informational              0\n",
      "Informational_Duration     0\n",
      "ProductRelated             0\n",
      "ProductRelated_Duration    0\n",
      "BounceRates                0\n",
      "ExitRates                  0\n",
      "PageValues                 0\n",
      "SpecialDay                 0\n",
      "Month                      0\n",
      "OperatingSystems           0\n",
      "Browser                    0\n",
      "Region                     0\n",
      "TrafficType                0\n",
      "VisitorType                0\n",
      "Weekend                    0\n",
      "Revenue                    0\n",
      "dtype: int64\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 12330 entries, 0 to 12329\n",
      "Data columns (total 18 columns):\n",
      " #   Column                   Non-Null Count  Dtype  \n",
      "---  ------                   --------------  -----  \n",
      " 0   Administrative           12330 non-null  int64  \n",
      " 1   Administrative_Duration  12330 non-null  float64\n",
      " 2   Informational            12330 non-null  int64  \n",
      " 3   Informational_Duration   12330 non-null  float64\n",
      " 4   ProductRelated           12330 non-null  int64  \n",
      " 5   ProductRelated_Duration  12330 non-null  float64\n",
      " 6   BounceRates              12330 non-null  float64\n",
      " 7   ExitRates                12330 non-null  float64\n",
      " 8   PageValues               12330 non-null  float64\n",
      " 9   SpecialDay               12330 non-null  float64\n",
      " 10  Month                    12330 non-null  object \n",
      " 11  OperatingSystems         12330 non-null  int64  \n",
      " 12  Browser                  12330 non-null  int64  \n",
      " 13  Region                   12330 non-null  int64  \n",
      " 14  TrafficType              12330 non-null  int64  \n",
      " 15  VisitorType              12330 non-null  object \n",
      " 16  Weekend                  12330 non-null  bool   \n",
      " 17  Revenue                  12330 non-null  bool   \n",
      "dtypes: bool(2), float64(7), int64(7), object(2)\n",
      "memory usage: 1.5+ MB\n"
     ]
    }
   ],
   "source": [
    "missing = data.isnull().sum()\n",
    "print(missing)\n",
    "data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ef5b3d1d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Administrative</th>\n",
       "      <th>Administrative_Duration</th>\n",
       "      <th>Informational</th>\n",
       "      <th>Informational_Duration</th>\n",
       "      <th>ProductRelated</th>\n",
       "      <th>ProductRelated_Duration</th>\n",
       "      <th>BounceRates</th>\n",
       "      <th>ExitRates</th>\n",
       "      <th>PageValues</th>\n",
       "      <th>SpecialDay</th>\n",
       "      <th>Month</th>\n",
       "      <th>OperatingSystems</th>\n",
       "      <th>Browser</th>\n",
       "      <th>Region</th>\n",
       "      <th>TrafficType</th>\n",
       "      <th>VisitorType</th>\n",
       "      <th>Weekend</th>\n",
       "      <th>Revenue</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.20</td>\n",
       "      <td>0.20</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Feb</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Returning_Visitor</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2</td>\n",
       "      <td>64.000000</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.10</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Feb</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>Returning_Visitor</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.20</td>\n",
       "      <td>0.20</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Feb</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>9</td>\n",
       "      <td>3</td>\n",
       "      <td>Returning_Visitor</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2</td>\n",
       "      <td>2.666667</td>\n",
       "      <td>0.05</td>\n",
       "      <td>0.14</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Feb</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>Returning_Visitor</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>10</td>\n",
       "      <td>627.500000</td>\n",
       "      <td>0.02</td>\n",
       "      <td>0.05</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Feb</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>Returning_Visitor</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Administrative  Administrative_Duration  Informational  \\\n",
       "0               0                      0.0              0   \n",
       "1               0                      0.0              0   \n",
       "2               0                      0.0              0   \n",
       "3               0                      0.0              0   \n",
       "4               0                      0.0              0   \n",
       "\n",
       "   Informational_Duration  ProductRelated  ProductRelated_Duration  \\\n",
       "0                     0.0               1                 0.000000   \n",
       "1                     0.0               2                64.000000   \n",
       "2                     0.0               1                 0.000000   \n",
       "3                     0.0               2                 2.666667   \n",
       "4                     0.0              10               627.500000   \n",
       "\n",
       "   BounceRates  ExitRates  PageValues  SpecialDay Month  OperatingSystems  \\\n",
       "0         0.20       0.20         0.0         0.0   Feb                 1   \n",
       "1         0.00       0.10         0.0         0.0   Feb                 2   \n",
       "2         0.20       0.20         0.0         0.0   Feb                 4   \n",
       "3         0.05       0.14         0.0         0.0   Feb                 3   \n",
       "4         0.02       0.05         0.0         0.0   Feb                 3   \n",
       "\n",
       "   Browser  Region  TrafficType        VisitorType  Weekend  Revenue  \n",
       "0        1       1            1  Returning_Visitor    False    False  \n",
       "1        2       1            2  Returning_Visitor    False    False  \n",
       "2        1       9            3  Returning_Visitor    False    False  \n",
       "3        2       2            4  Returning_Visitor    False    False  \n",
       "4        3       1            4  Returning_Visitor     True    False  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "cb86623b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(12330, 2)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x = data.iloc[:, [5, 6]].values\n",
    "x.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "359b5061",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 936x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.cluster import KMeans\n",
    "\n",
    "wcss = []\n",
    "for i in range(1, 11):\n",
    "    km = KMeans(n_clusters = i,\n",
    "              init = 'k-means++',\n",
    "              max_iter = 300,\n",
    "              n_init = 10,\n",
    "              random_state = 0,\n",
    "              algorithm = 'full',\n",
    "              tol = 0.001)\n",
    "    km.fit(x)\n",
    "    labels = km.labels_\n",
    "    wcss.append(km.inertia_)\n",
    "    \n",
    "plt.rcParams['figure.figsize'] = (13, 7)\n",
    "plt.plot(range(1, 11), wcss)\n",
    "plt.grid()\n",
    "plt.tight_layout()\n",
    "plt.title('The Elbow Method', fontsize = 20)\n",
    "plt.xlabel('No. of Clusters')\n",
    "plt.ylabel('wcss')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "9a887082",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 936x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "km = KMeans(n_clusters = 5, init = 'k-means++', max_iter = 300, n_init = 10, random_state = 0)\n",
    "# get predicted cluster index for each sample: 0, 1, 2\n",
    "y_means = km.fit_predict(x)\n",
    "\n",
    "plt.scatter(x[y_means == 0, 0], x[y_means == 0, 1], s = 50, c = 'yellow', label = 'Uninterested Customers')\n",
    "plt.scatter(x[y_means == 1, 0], x[y_means == 1, 1], s = 50, c = 'pink', label = 'Target Customers')\n",
    "plt.scatter(x[y_means == 2, 0], x[y_means == 2, 1], s = 50, c = 'blue', label = 'Target Customers')\n",
    "plt.scatter(x[y_means == 3, 0], x[y_means == 3, 1], s = 50, c = 'red', label = 'Target Customers')\n",
    "plt.scatter(x[y_means == 4, 0], x[y_means == 4, 1], s = 50, c = 'green', label = 'Target Customers')\n",
    "plt.scatter(km.cluster_centers_[:,0], km.cluster_centers_[:, 1], s = 50, c = 'black' , label = 'centeroid')\n",
    "\n",
    "plt.title('ProductRelated Duration vs Bounce Rate', fontsize = 20)\n",
    "plt.grid()\n",
    "plt.xlabel('ProductRelated Duration')\n",
    "plt.ylabel('Bounce Rates')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "abcfc871",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Adjusted rand index: \n",
      "0.08551380297713176\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "plot_confusion_matrix only supports classifiers",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-12-7bb0411a83c0>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m     13\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     14\u001b[0m \u001b[1;31m# print confusion matrix\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 15\u001b[1;33m \u001b[0mcm\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mmetrics\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mplot_confusion_matrix\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;32mNone\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mlabels_true\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mlabels_pred\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     16\u001b[0m \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mcm\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     17\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\sklearn\\utils\\validation.py\u001b[0m in \u001b[0;36minner_f\u001b[1;34m(*args, **kwargs)\u001b[0m\n\u001b[0;32m     61\u001b[0m             \u001b[0mextra_args\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mlen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0margs\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;33m-\u001b[0m \u001b[0mlen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mall_args\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     62\u001b[0m             \u001b[1;32mif\u001b[0m \u001b[0mextra_args\u001b[0m \u001b[1;33m<=\u001b[0m \u001b[1;36m0\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 63\u001b[1;33m                 \u001b[1;32mreturn\u001b[0m \u001b[0mf\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m*\u001b[0m\u001b[0margs\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     64\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     65\u001b[0m             \u001b[1;31m# extra_args > 0\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\sklearn\\metrics\\_plot\\confusion_matrix.py\u001b[0m in \u001b[0;36mplot_confusion_matrix\u001b[1;34m(estimator, X, y_true, labels, sample_weight, normalize, display_labels, include_values, xticks_rotation, values_format, cmap, ax, colorbar)\u001b[0m\n\u001b[0;32m    256\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    257\u001b[0m     \u001b[1;32mif\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[0mis_classifier\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mestimator\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 258\u001b[1;33m         \u001b[1;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"plot_confusion_matrix only supports classifiers\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    259\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    260\u001b[0m     \u001b[0my_pred\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mestimator\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mX\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mValueError\u001b[0m: plot_confusion_matrix only supports classifiers"
     ]
    }
   ],
   "source": [
    "from sklearn.preprocessing import LabelEncoder\n",
    "le = LabelEncoder()\n",
    "labels_true = le.fit_transform(data['Revenue'])\n",
    "\n",
    "# get predicted clustering result label\n",
    "labels_pred = y_means\n",
    "\n",
    "# print adjusted rand index, which measures the similarity of the two assignments\n",
    "from sklearn import metrics\n",
    "score = metrics.adjusted_rand_score(labels_true, labels_pred)\n",
    "print(\"Adjusted rand index: \")\n",
    "print(score)\n",
    "\n",
    "import sklearn.matrix import confusion\n",
    "# print confusion matrix\n",
    "cm = metrics.plot_confusion_matrix(None, labels_true, labels_pred)\n",
    "print(cm)\n",
    "\n",
    "#import scikitplot as skplt\n",
    "#plt_1 = skplt.metrics.plot_confusion_matrix(labels_true, labels_pred, normalize=False)\n",
    "#plt_2 = skplt.metrics.plot_confusion_matrix(labels_true, labels_pred, normalize=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cdbee1b1",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
